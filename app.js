// You want to seperate each of the functional modules.
// This is the idea of "Seperation of Concerns".

// BUDGET CONTROLLER MODULE
var budgetController = (function() { 

    // expense object
    var Expense = function(id,description,value) {
        this.id=id;
        this.description =description;
        this.value=value; 
        this.percentage = -1;
    };

    // this function calculates percentage
    Expense.prototype.calcPercentage = function(totalIncome) {
        if(totalIncome > 0){
            this.percentage = Math.round((this.value / totalIncome) * 100);
        } else {
            this.percentage = -1;
        }
    };

    // this function returns the calculated percentages 
    Expense.prototype.getPercentage = function() {
        return this.percentage;
    };

    // income object
    var Income = function(id,description,value) {
        this.id=id;
        this.description =description;
        this.value=value; 
    };

    var calculateTotal = function(type) {
        var sum = 0;

        data.allItems[type].forEach(function(cur) {
            sum += cur.value; 
        });
        /** example
         * 0
         * [200, 400, 100]
         * sum = 0 + 200
         * sum = 200 + 400
         * sum = 600 + 100 = 700
         */

         data.totals[type] = sum;
    };

    // contains all data in one object 
    var data = { 
        allItems: {
            exp: [],
            inc: []
        },
        totals: {
            exp: 0,
            inc: 0
        },

        budget: 0,
        percentage: -1 // -1 is a value we use to indicate non-existence 
    };

    return {
        addItem: function(type, des,val) {
            var newItem, ID;

            // [1 2 3 4 5], next ID = 6
            // [1 2 4 6 8], next ID = 9
            // ID = last ID + 1

            // create new ID, basically creating a new slot for the array in the allItems inside the data objects. 
            if(data.allItems[type].length > 0){ 
                // if data type array greater than 0, then the code below will create and add the new ID/slot to the end of the inc or exp array. 
                ID = data.allItems[type][data.allItems[type].length - 1].id + 1;
            } else {
                ID = 0;
            }
            
            // create new Item based on 'inc' or 'exp'
            if(type === 'exp'){
                newItem = new Expense(ID, des, val);
            } else if (type === 'inc'){
                newItem = new Income(ID, des,val);
            }
            
            // push it into our data structure
            data.allItems[type].push(newItem); 
            // if type is exp, it will select exp. if type is inc, it
            // will select inc in the data object above. 

            // return the new element 
            return newItem; // return new object generated by if statement above

        },

        deleteItem: function(type, id) {
            var ids, index;
            // id = 6, we want to remove 6.
            //data.allItems[type][id];
            //ids = [1 2 4 6 8] 
            // index = 3 
            // .map() method, creates a new array with results from a function of another array element. 
            ids = data.allItems[type].map(function(current){
                return current.id;
            });

            index = ids.indexOf(id);

            if (index !== -1 ){
                //.splice() is used to remove elements
                //.splice(position number of where we want to start deleting, number of elements you want to delete)
                data.allItems[type].splice(index, 1);
            }

        },

        calculateBudget: function() {

            // calculate total income and expenses
            calculateTotal('exp');
            calculateTotal('inc');
    
            // calculate the budget: income - expenses 
            data.budget = data.totals.inc - data.totals.exp;
    
            // calculate the percentage of income that we spent 
            // if income is > 0, calculate percentage. else, non-existent
            if (data.totals.inc > 0) {
            data.percentage = Math.round((data.totals.exp / data.totals.inc) * 100);
            } else {
                data.percentage = 0; 
            }
            /** Example
             *  Expense = 100 and income 300, spent 33.33% = 100/300 = 0.3333 * 100
             */
        },

        calculatePercentages: function() {
    
            /**
             * a= 20
             * b=10
             * c=40
             * income = 100
             * a=20/100=20%
             * b=10/100=10%
             * c=40/100=40%
             */
        
             // forEach() allows us to loop through an array, but it cannot store it inside an array
             // we can store it through the function below. 
             data.allItems.exp.forEach(function(cur) {
                cur.calcPercentage(data.totals.inc);
             });
             
        },

        getPercentages: function() {
            // the map(), function returns a variable from the result
            var allPerc = data.allItems.exp.map(function(cur) {
                return cur.getPercentage();
            });
            return allPerc; // allPerc, an array of all the percentages
        },
    
        getBudget: function() {
            return {
                budget: data.budget,
                totalInc: data.totals.inc,
                totalExp: data.totals.exp,
                percentage: data.percentage
            };
        },

        testing: function() {
            console.log(data);
        }
    };

})();


// UI CONTROLLER MODULE
var UIController = (function() {

    var DOMstrings = { // we can store the String formatted HTML elements here. it will prevent future bugs due to HTML modification. 
        inputType: '.add__type',
        inputDescription: '.add__description',
        inputValue: '.add__value',
        inputBtn: '.add__btn',
        incomeContainer: '.income__list',
        expensesContainer: '.expenses__list',
        budgetLabel: '.budget__value',
        incomeLabel: '.budget__income--value',
        expenseLabel: '.budget__expenses--value',
        percentageLabel: '.budget__expenses--percentage',
        container: '.container',
        expensesPercLabel: '.item__percentage',
        dateLabel: '.budget__title--month'
    };

    var formatNumber = function(num, type){
        var numSplit, int, dec;
        /**
         * + or - before number
         * exactly 2 decimal points 
         * comma seperating the thousands
         * 
         * 2310.4567 -> + 2,310.46
         * 2000 -> + 2,000.00 
         */

         num = Math.abs(num);
         num = num.toFixed(2); // will always put two decimal numbers. it will automatically round. 

         numSplit = num.split('.');

         int = numSplit[0];
        if(int.length > 3){
            int = int.substr(0, int.length - 3) + ',' + int.substr(int.length - 3, 3); //substr(); returns 2310 as 2,310 
        } 

         dec = numSplit[1];

         return (type === 'exp' ? '-': '+') + ' ' + int + '.' + dec;
    };

    var nodeListForEach = function(list, callback) { // this will be a for loop that in each iteration will call our callback function. Reusable for nodelists. 
        for(var i = 0; i < list.length; i++){
            callback(list[i], i); // the callback function is below at the second parameter. 
        }
    };

    // Some code
    return {
        getInput: function() {

            return{ // controller will expect a return. 
                type: document.querySelector(DOMstrings.inputType).value, // will be either inc or exp
                description: document.querySelector(DOMstrings.inputDescription).value,
                value: parseFloat(document.querySelector(DOMstrings.inputValue).value)
            };
        },

        addListItem: function(obj, type) {
            var html, newHtml, element;

            // Create HTML string with placeholder text.
            if(type === 'inc') {
            element = DOMstrings.incomeContainer;
            html = '<div class="item clearfix" id="inc-%id%"><div class="item__description">%description%</div> <div class="right clearfix"> <div class="item__value">%value%</div><div class="item__delete"> <button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button></div></div></div>';
            } else if(type === 'exp') {
            element = DOMstrings.expensesContainer;
            html = '<div class="item clearfix" id="exp-%id%"><div class="item__description">%description%</div> <div class="right clearfix"> <div class="item__value">%value%</div><div class="item__percentage">21%</div><div class="item__delete"><button class="item__delete--btn"><i class="ion-ios-close-outline"></i></button></div></div> </div>';
            }

            // Replace the placeholder text with some actual data.
            newHtml = html.replace('%id%', obj.id);
            newHtml = newHtml.replace('%description%', obj.description); 
            newHtml = newHtml.replace('%value%', formatNumber(obj.value, type));

            // Insert the HTML into the DOM.
            document.querySelector(element).insertAdjacentHTML('beforeend', newHtml);

        },

        deleteListItem: function(selectorID){
            var el = document.getElementById(selectorID);
            el.parentNode.removeChild(el);
        },

        clearFields: function() { 
            // the purpose of this function is just to clear the user input fields/input-textbox. 
            var fields, fieldsArr;

            fields = document.querySelectorAll(DOMstrings.inputDescription + ', ' + DOMstrings.inputValue); // this returns a list, what we want is an array. a list doesn't have the same attributes and functionality that we want - so we have to convert the output from a list to an array. the array allows us to loop over it, the list does not. We use the ', ' to seperate cus these use CSS syntax. 

            // fields.slice(), we dont do this. because the slice() is an array.prototype function. only works with arrays. 

            fieldsArr = Array.prototype.slice.call(fields); // this converts te returned list in the fields variable into an array. We use the slice method. we use the call() method so taht we can use slice() on the fields variable. 

            //forEach() method, pass a call back function into, and that call back function is applied to each element in the array. Can accept up to 3 arguments.
            fieldsArr.forEach(function(current, index, array){ //this loops over the elements of the fieldsArr array, and replaces it with empty. 
                current.value =""; // sets the current field to empty. 
            });

            fieldsArr[0].focus(); // re-focus user's courser on the add discription input box.
        },

        displayBudget: function(obj){
            // changing textContent for budget, income, expense, and percentage labels on HTML
            /** This is the object being pass through this function
                getBudget: function() {
                    return {
                        budget: data.budget,
                        totalInc: data.totals.inc,
                        totalExp: data.totals.exp,
                        percentage: data.percentage
                    };
                },
             */

             var type;
             obj.budget > 0 ? type = 'inc' : type = 'exp';

            document.querySelector(DOMstrings.budgetLabel).textContent = formatNumber(obj.budget, type);
            document.querySelector(DOMstrings.incomeLabel).textContent = formatNumber(obj.totalInc, 'inc');
            document.querySelector(DOMstrings.expenseLabel).textContent = formatNumber(obj.totalExp,'exp');

            if (obj.percentage > 0) {
                document.querySelector(DOMstrings.percentageLabel).textContent = obj.percentage;
            } else {
                document.querySelector(DOMstrings.percentageLabel).textContent = "---";
            }
        },

        displayPercentages: function(percentages) { // percentages is an array
            
            var fields = document.querySelectorAll(DOMstrings.expensesPercLabel);  // this returns a node list. in a DOM tree, each HTML element is a node. a nodelist doesnt have a forEach method. What we have to do is convert them through a 'hack'. we do that below. 

            nodeListForEach(fields, function(current, index) {
                if(percentages[index] > 0) {
                    current.textContent = percentages[index] + '%';
                } else {
                    current.textContent = '---';
                }
            });
        },

        displayMonth: function() {
            var now, year, month;
            now = new Date(); // todays date. 
            //var christmas = new Date(2016, 11, 25); // Date(year, month in zero base, and the date);
            months =['January', 'Febuary', 'Marh', 'April', 'May', 'June', 'July', 'August',  'September', 'October', 'November', 'December'];
            month = now.getMonth();
            year = now.getFullYear(); 
            document.querySelector(DOMstrings.dateLabel).textContent = months[month] + ' '+ year;
        },

        changeType: function(){
            var fields = document.querySelectorAll(
                DOMstrings.inputType + ',' + 
                DOMstrings.inputDescription + ',' +
                DOMstrings.inputValue); // this returns a node list. we have to use the nodeListForEach method we wrote before. 

                nodeListForEach(fields, function(cur){
                    cur.classList.toggle('red-focus'); // when we want something to change that is temporary, or is determined by a set of conditions, it is recommended that we use .toggle(). 
                });

                document.querySelector(DOMstrings.inputBtn).classList.toggle('red');

        },

        getDOMstrings: function(){
            return DOMstrings;
        }
    };

})();


// GLOBAL APP CONTROLLER (MODULE) - where you want all modules to interact 
// with each other. 
var controller = (function(budgetCtrl,UICtrl) {

    // Event listeners
    var setupEventListeners = function() {
    
        var DOM =  UICtrl.getDOMstrings(); // UIController passing private DOMstrings function and data to Controller module.
    
        document.querySelector(DOM.inputBtn).addEventListener('click', ctrlAddItem);
        document.addEventListener('keypress', function(event){
            if(event.keyCode === 13 || event.which === 13 ) {
                ctrlAddItem();
            }
        });

        document.querySelector(DOM.container).addEventListener('click', ctrlDeleteItem);

        document.querySelector(DOM.inputType).addEventListener('change', UICtrl.changeType);
    };

    var updateBudget = function(){
        // 1. calculate the budget 
        budgetCtrl.calculateBudget();

        // 2. return the budget
        var budget = budgetCtrl.getBudget(); 

        // 3. display the budget on the UI
        UICtrl.displayBudget(budget);

    };

    var updatePercentages = function() {

        // 1. calculate percentages
        budgetCtrl.calculatePercentages();

        // 2. read percentages from the budget controller
        var percentages = budgetCtrl.getPercentages();

        // 3. update the UI with the new percentages
        //console.log(percentages);
        UICtrl.displayPercentages(percentages);

    };

    // add item - once the setupEventListeners() activate, it will call upon the below code. 
    var  ctrlAddItem = function() {
        var input, newItem;

        //1. get the filled input data
        input = UICtrl.getInput();

        // if input.description is empty ("") && input.value is not a number (!isNan) && input.value is greater than 0. 
        if (input.description !== "" && !isNaN(input.value) && input.value > 0) {

        //2. add the item to the budget controller
        newItem = budgetCtrl.addItem(input.type, input.description, input.value);

        //3. add the item to the UI 
        UICtrl.addListItem(newItem, input.type);

        //4. clear the fields
        UICtrl.clearFields();

        // 5. calculate and update budget 
        updateBudget();

        // 6. calculate and update percentages
        updatePercentages();

        }

    };

    // delete function, when clicking the x bubbles on the app, it will delete entry
    var ctrlDeleteItem = function(event){
        //DOM TRAVERSING - this is a good way to specify which portion of the code you would like the event to interact with. 
        var itemID,splitID,type;

        itemID = event.target.parentNode.parentNode.parentNode.parentNode.id; 
        if(itemID) {
            
            //inc-1 - as a side note, javascript automatically generates a variable into an object. Whether it be a number, string, etc - javascript will make an object out of that varaible. 
            splitID = itemID.split('-'); 
            type = splitID[0]; // we use split() method to access type inc or exp
            ID = parseInt(splitID[1]); // we want to convert this to a number from string.  

            // 1. delete item from the data structure
            budgetCtrl.deleteItem(type, ID);
            
            // 2. delete the tite from the UI
            UICtrl.deleteListItem(itemID);

            // 3. update and show the new budget
            updateBudget();

            // 4. calculate and update percentages
            updatePercentages();
        }
    };

    // init function will return the private functions 
    return {
        init: function() {
            console.log('Application has started.');
            UICtrl.displayMonth();
            setupEventListeners();
            UICtrl.displayBudget({
                budget: 0,
                totalInc: 0,
                totalExp: 0,
                percentage: -1
            }); // reset everything to zero at start of the application
        }
    };

})(budgetController, UIController);

controller.init();